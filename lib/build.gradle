apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka'

version = "${rootProject.versionMajor}.${rootProject.versionMinor}.${rootProject.versionPatch}"

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionName rootProject.versionName
        versionCode rootProject.versionCode
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
    }
}

dependencies {
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2-native-mt'

    def archLifecycleVersion = '2.2.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation 'com.google.android.material:material:1.2.1'
}

dokkaHtml {
    outputDirectory =  "$buildDir/dokka"
    dokkaSourceSets {
        create ( "main" ) {
            noAndroidSdkLink =  true
        }
        create ( "jvmMain" ) {}
    }
}

// Publishing

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

def AUTHOR = "Alexandr Tsvetkov"
def LIB_DESCRIPTION = 'Tiny, lightweight and informative logger for Android.'
def GROUP_ID = 'ua.at.tsvetkov'
def ARTIFACT_ID = 'taolog'
def LICENSE = 'GPL 3.0'
def LICENSE_URL = 'https://www.gnu.org/licenses/gpl-3.0.html'
def GIT_USER = 'lordtao'
def GIT_PROJECT_NAME = 'android-tao-log'
def GIT_SITE_URL = 'https://github.com/lordtao/android-tao-log'
def GIT_ISSUE_URL = 'https://github.com/lordtao/android-tao-log/issues'
def GIT_URL = 'https://github.com/lordtao/android-tao-log.git'
def EMAIL = 'tsvetkov2010@gmail.com'

// Hide properties from ext users
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = GIT_PROJECT_NAME
        websiteUrl = GIT_SITE_URL
        vcsUrl = GIT_URL
        licenses = [LICENSE]
        publish = true
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name LIB_DESCRIPTION
                url GIT_SITE_URL

                licenses {
                    license {
                        name LICENSE
                        url LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id GIT_USER
                        name AUTHOR
                        email EMAIL
                    }
                }
                scm {
                    connection GIT_URL
                    developerConnection GIT_URL
                    url GIT_SITE_URL
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions  {
    doLast {
        println project.getConvention()
    }
}
